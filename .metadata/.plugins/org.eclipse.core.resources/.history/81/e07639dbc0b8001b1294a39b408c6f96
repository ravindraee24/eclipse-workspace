package com.dlrupdate.dlr.controller;

import java.security.*;
import java.security.cert.X509Certificate;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.SSLContext;

import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.dlrupdate.dlr.service.dlrupdaeServiceImpl;
@RestController
@RequestMapping("/api/")
public class ActiveConect {

	
		
	  
		private static final Logger logger = LogManager.getLogger(ActiveConect.class);
		@RequestMapping(value="v1/send", method = RequestMethod.GET)
			
		public @ResponseBody ResponseEntity<Object> getItem(@RequestParam Map<String,String> requestParams){
			try {
			//String query = request.getQueryString();
			//long _transactionId_=Long.parseLong( requestParams.get("transactionId"));
			String username=requestParams.get("username");
			String _recpient_=requestParams.get("to");
			String _sender_=requestParams.get("from");
			String password=requestParams.get("password");
			String unicode=requestParams.get("unicode");
			String _message_=requestParams.get("text");
			//String templateId=requestParams.get("templateId");
			String dltContentId=requestParams.get("dltContentId");
			//String _submitdt_=requestParams.get("submitdt");
			//dlupdaeservice.insercallbackboot(_transactionId_, _recieptId_, _recpient_, _sender_, _description_, _totalPdu_, _message_, _deliverystatus_, _deliverydt_, _submitdt_);
			logger.error(requestParams);
			if( username == null || username.length() == 0||password == null || password.length() == 0 ||_sender_ == null || _sender_.length() == 0 )
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\"Mandatory parameters missing." + 
			    		"\",\"pdu\":\"\""
			    		+ ",\"corelationId\": null}");
			if(_message_ == null || _message_.length() == 0)
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\"message text not found" + 
			    		"\",\"pdu\":\"\""
			    		+ ",\"corelationId\":null}");
			if(_recpient_ == null || _recpient_.length() < 10)
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\"Invalid Msisdn  ["+_recpient_+"]" + 
			    		"\",\"pdu\":\"\""
			    		+ ",\"corelationId\":null}");
			if(dltContentId == null || dltContentId.length() < 4)
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\"dltContentId  not found." + 
	    		"\",\"pdu\":\"\""
	    		+ ",\"corelationId\":null}");
		    String resp= callURL(username,password,_sender_, _recpient_,_message_,dltContentId);
		    if(resp.contains(_recpient_))
		    return ResponseEntity.ok("{\"transactionId\":\""+resp.replace(_recpient_, "").replace(" ", "").replace("-", "")+"\",\"state\":\"SUBMIT_ACCEPTED\",\"description\":\"Message submitted successfully" + 
		    		"\",\"pdu\":\"\""
		    		+ ",\"corelationId\":null}");
		    else
		    	return ResponseEntity.ok("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\""+resp+"" + 
			    		"\",\"pdu\":\"\""
			    		+ ",\"corelationId\":null}");
		}catch(Exception  e) {logger.error(e.getMessage()); System.out.println(e.getMessage()); return ResponseEntity.status(HttpStatus.FORBIDDEN).body("{\"transactionId\":\"\",\"state\":\"SUBMIT_REJECTED\",\"description\":\"Something went wrong." + 
	    		"\",\"pdu\":\"\""
	    		+ ",\"corelationId\": null}");}
		}
		private String callURL(String username,String password,String from,String to,String text,String dltContentId)
		{
			Map<String, String> vars = new HashMap<String, String>();
			vars.put("username", username);
			vars.put("password", password);
			vars.put("from", from);
			vars.put("to", to);
			vars.put("text", text);
			vars.put("dltContentId",dltContentId);
			 RestTemplate restTemplate;
			try {
				restTemplate = restTemplate();
			
			String result = 
			    restTemplate.getForObject("https://api.sss.bz/smpp?username={username}&password={password}&from={from}&TEMPLATE_ID={dltContentId}&to={to}&text={text}", String.class, vars);
			logger.error(""+result);
			return result;
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				logger.error(e.getMessage());
				return e.getMessage();
			}
			
		}
		public RestTemplate restTemplate() 
                throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
    TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;

    SSLContext sslContext = org.apache.http.ssl.SSLContexts.custom()
                    .loadTrustMaterial(null, acceptingTrustStrategy)
                    .build();

    SSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);

    CloseableHttpClient httpClient = HttpClients.custom()
                    .setSSLSocketFactory(csf)
                    .build();

    HttpComponentsClientHttpRequestFactory requestFactory =
                    new HttpComponentsClientHttpRequestFactory();

    requestFactory.setHttpClient(httpClient);
    RestTemplate restTemplate = new RestTemplate(requestFactory);
    return restTemplate;
 }
		}
	
